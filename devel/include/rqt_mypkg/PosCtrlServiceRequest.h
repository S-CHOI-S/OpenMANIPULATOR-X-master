// Generated by gencpp from file rqt_mypkg/PosCtrlServiceRequest.msg
// DO NOT EDIT!


#ifndef RQT_MYPKG_MESSAGE_POSCTRLSERVICEREQUEST_H
#define RQT_MYPKG_MESSAGE_POSCTRLSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rqt_mypkg
{
template <class ContainerAllocator>
struct PosCtrlServiceRequest_
{
  typedef PosCtrlServiceRequest_<ContainerAllocator> Type;

  PosCtrlServiceRequest_()
    : desired_X(0.0)
    , desired_Y(0.0)
    , desired_Yaw(0.0)
    , desired_Alti(0.0)  {
    }
  PosCtrlServiceRequest_(const ContainerAllocator& _alloc)
    : desired_X(0.0)
    , desired_Y(0.0)
    , desired_Yaw(0.0)
    , desired_Alti(0.0)  {
  (void)_alloc;
    }



   typedef float _desired_X_type;
  _desired_X_type desired_X;

   typedef float _desired_Y_type;
  _desired_Y_type desired_Y;

   typedef float _desired_Yaw_type;
  _desired_Yaw_type desired_Yaw;

   typedef float _desired_Alti_type;
  _desired_Alti_type desired_Alti;





  typedef boost::shared_ptr< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PosCtrlServiceRequest_

typedef ::rqt_mypkg::PosCtrlServiceRequest_<std::allocator<void> > PosCtrlServiceRequest;

typedef boost::shared_ptr< ::rqt_mypkg::PosCtrlServiceRequest > PosCtrlServiceRequestPtr;
typedef boost::shared_ptr< ::rqt_mypkg::PosCtrlServiceRequest const> PosCtrlServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator1> & lhs, const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.desired_X == rhs.desired_X &&
    lhs.desired_Y == rhs.desired_Y &&
    lhs.desired_Yaw == rhs.desired_Yaw &&
    lhs.desired_Alti == rhs.desired_Alti;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator1> & lhs, const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rqt_mypkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80a636fc1acfa66a2cafa05380613d88";
  }

  static const char* value(const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80a636fc1acfa66aULL;
  static const uint64_t static_value2 = 0x2cafa05380613d88ULL;
};

template<class ContainerAllocator>
struct DataType< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rqt_mypkg/PosCtrlServiceRequest";
  }

  static const char* value(const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 desired_X\n"
"float32 desired_Y\n"
"float32 desired_Yaw\n"
"float32 desired_Alti\n"
;
  }

  static const char* value(const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_X);
      stream.next(m.desired_Y);
      stream.next(m.desired_Yaw);
      stream.next(m.desired_Alti);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosCtrlServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rqt_mypkg::PosCtrlServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "desired_X: ";
    Printer<float>::stream(s, indent + "  ", v.desired_X);
    s << indent << "desired_Y: ";
    Printer<float>::stream(s, indent + "  ", v.desired_Y);
    s << indent << "desired_Yaw: ";
    Printer<float>::stream(s, indent + "  ", v.desired_Yaw);
    s << indent << "desired_Alti: ";
    Printer<float>::stream(s, indent + "  ", v.desired_Alti);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RQT_MYPKG_MESSAGE_POSCTRLSERVICEREQUEST_H
