// Generated by gencpp from file rqt_mypkg/HoverServiceRequest.msg
// DO NOT EDIT!


#ifndef RQT_MYPKG_MESSAGE_HOVERSERVICEREQUEST_H
#define RQT_MYPKG_MESSAGE_HOVERSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rqt_mypkg
{
template <class ContainerAllocator>
struct HoverServiceRequest_
{
  typedef HoverServiceRequest_<ContainerAllocator> Type;

  HoverServiceRequest_()
    : isHover(false)
    , isHovering(false)
    , isLanding(false)  {
    }
  HoverServiceRequest_(const ContainerAllocator& _alloc)
    : isHover(false)
    , isHovering(false)
    , isLanding(false)  {
  (void)_alloc;
    }



   typedef uint8_t _isHover_type;
  _isHover_type isHover;

   typedef uint8_t _isHovering_type;
  _isHovering_type isHovering;

   typedef uint8_t _isLanding_type;
  _isLanding_type isLanding;





  typedef boost::shared_ptr< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HoverServiceRequest_

typedef ::rqt_mypkg::HoverServiceRequest_<std::allocator<void> > HoverServiceRequest;

typedef boost::shared_ptr< ::rqt_mypkg::HoverServiceRequest > HoverServiceRequestPtr;
typedef boost::shared_ptr< ::rqt_mypkg::HoverServiceRequest const> HoverServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator1> & lhs, const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.isHover == rhs.isHover &&
    lhs.isHovering == rhs.isHovering &&
    lhs.isLanding == rhs.isLanding;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator1> & lhs, const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rqt_mypkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8930d5ae44ec72110e415a4dfe50939b";
  }

  static const char* value(const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8930d5ae44ec7211ULL;
  static const uint64_t static_value2 = 0x0e415a4dfe50939bULL;
};

template<class ContainerAllocator>
struct DataType< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rqt_mypkg/HoverServiceRequest";
  }

  static const char* value(const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isHover\n"
"bool isHovering\n"
"bool isLanding\n"
;
  }

  static const char* value(const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isHover);
      stream.next(m.isHovering);
      stream.next(m.isLanding);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HoverServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rqt_mypkg::HoverServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "isHover: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isHover);
    s << indent << "isHovering: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isHovering);
    s << indent << "isLanding: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isLanding);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RQT_MYPKG_MESSAGE_HOVERSERVICEREQUEST_H
